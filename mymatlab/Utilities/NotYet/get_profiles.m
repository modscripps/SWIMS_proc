function [profile_begin,profile_end,up_down,bad_flags]=get_profiles(pr,day,samp_freq);% [profile_begin,profile_end,up_down,bad_flags]=get_profiles(pr,day);%% Turns SWIMS saw-tooths into profiles.  Longterm pressure inversions are% the necessary criteria for the profiles to be turning around.  Lets asume% the fall rate and the pull up rate must be greater than 10cm/s...%   up_down=-1 means that pressure was increasing.  up_down=+1 means%   pressure was decreasing.%   bad_flags is a list of data that is bad, but still inside a "profile".%   This edits loops in the line etc.if nargin<3  error('Usage: [profile_begin,profile_end,up_down,bad_flags]=get_profiles(pr,day,sample_frequency);');end;  if nargin == 2  samp_freq = 24;end;if size(pr)~=size(day)  error('Pressure and Day must be the same size');end;  %MHA changebad_flags=[];TOL = 0.1;  % m/sMIN_PROFILE_TIME = 5;   % s% Filter the rpessure *a lot* to get rid of high frequency stuff...pr_tc = 2;Nyq = 1/12;%[n,Wn] = buttord( 1/(pr_tc*Nyq), 5/(pr_tc*Nyq), 1, 45);%[b,a] = butter(n,Wn);%MHA changes%Use a 20-second filter.tc=20;[b,a]=MHAbutter(1/samp_freq,tc);pr_effective = filtfilt(b,a,pr);%pr_effective = pr;% Determine the fall/climb rate in m/s%speed = diff(pr_effective*100)./nanmean(diff(day*24*3600));%MHA: I changed speed to just use samp_freq to compute it.speed=diff(pr_effective*100)*samp_freq;len_speed = length(speed);% Now go through the speed and get zero crossings.  Only allow a crossing% when out of 10cm/s%pos =1;% get into a down or up cast:% Now loop until the endn_profs = 0; up_down=[];prof_begin=[];prof_end=[];good_data = find(abs(speed)>TOL);if isempty(good_data)  % no data is fast enough to pass the speed test.  This may not be a good  % routine to use...  profile_begin=[];profile_end=[];up_down=[];bad_flags=[];  return;end;g_speed = speed(good_data);len = length(g_speed);g_end = find( (g_speed(1:len-1)>TOL & g_speed(2:len)<TOL)  |...    (g_speed(1:len-1)<TOL & g_speed(2:len)>TOL));size(g_end)% the only other case is only one profile in which caseif isempty(g_end)  g_end=length(g_speed);  g_begin = [1];  profile_end = [good_data(length(good_data))];  profile_begin = [good_data(1)];else  g_begin = [1;g_end+1];  profile_end = [good_data(g_end); length(pr)];  profile_begin = [good_data(g_begin)];end;% This is the end of the old algorithm.  Now we need to decide what profiles% are any good, and which ones are garbage, and which ones need to be bad% flagged.   good_profiles = find(profile_end-profile_begin >= ...    samp_freq*MIN_PROFILE_TIME);if isempty(good_profiles)  profile_begin=[];  profile_end=[];  up_down=[];  returnend;% There are two cases: 1) The next good profile is in the opposite% direction, and 2) the next good profile is in the same direction.  In case% one, nothing needs to be done.  For case (2) we need to bad flag the bad% profiles and connect the two good ones...profile_begin = profile_begin(good_profiles);profile_end = profile_end(good_profiles);up_down = zeros(size(profile_begin));% Now figure out if the profile is going up, down, or neitherfor i = 1:length(profile_begin)    mean_speed=...     mean(speed([profile_begin(i):min(profile_end(i),length(speed))]));    if (mean_speed>TOL)    up_down(i) = -1;  elseif (mean_speed<-1*TOL)    up_down(i) = 1;  else     up_down(i) = 0;      end;end;% If the profile is not going up or down its bad and lets get rid of it...good_profiles = find(up_down~=0);profile_begin = profile_begin(good_profiles);profile_end = profile_end(good_profiles);up_down = up_down(good_profiles);% hold on% plot(day(profile_begin),pr(profile_begin),'gx')% plot(day(profile_end),pr(profile_end),'rx')i = 1;while i<length(up_down)-1  if up_down(i)==up_down(i+1)    bad_flags = [bad_flags,...      profile_end(i)+1:profile_begin(i+1)-1];    if i<length(profile_begin)-1            profile_begin = profile_begin( [1:i,i+2:length(profile_begin)]);    else      profile_begin = profile_begin( 1:i );    end;    if i>1          profile_end = profile_end( [1:i-1,i+1:length(profile_end)]);      up_down = up_down( [1:i-1,i+1:length(up_down)]);          else      profile_end = profile_end(i+1:length(profile_end));         up_down = up_down(i+1:length(up_down));       end;         else    i = i+1;  end;    end;profile_begin=profile_begin';profile_end=profile_end';up_down=up_down';bad_flags=bad_flags';