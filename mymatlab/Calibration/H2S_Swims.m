function [cSG,cH2S] = H2S_Swims(H2SV, T, pH, P, H2SCoef)%function [cSG,cH2S] = H2S_Swims(H2SV, T, pH, P, H2SCoef)% Compute cSG = total sulphide concentration (mg/L), %       cH2S = H2S concentration (mg/L) [optional];%   Input:%   H2SV = raw Volts (0 to 5) [convert to mV to apply cals],%   T = temperature (degC, in situ),%   pH = pH value (0 to 14, usually 5 to 9)%   P = pressure (MPa) [if == null or 0, no depth correction],%   and H2SCoef = structure of calibration coefficients.%   Any time shifting or filtering to match H2SV with (T, pH, P)%   should be done before data are passed to this function.%   Sensor type: ??% feb-2003, DPWCtoK = 273.15;  % Celsius to KelvinK1e = -6.919; % K1 exponent for total sulphide calc% exponent factors for depth correction term:dcUe = 32.06 * 0.001 * 9.81; % upper termdcLe = 8.314; % lower termFS_lf=24; % sample rate in Hz% Temperature compensation factorET = ((H2SCoef.aT3.*T + H2SCoef.aT2).*T + H2SCoef.aT1).*T + H2SCoef.aT0;% Depth correction factorif isempty(P) | P==0    KT = 1;else    P=P*100; % convert MPa to dbar =(equiv) meters    KT = exp( - (dcUe.*P)./(dcLe.*(T+CtoK)) );end% H2S concentration (with depth correction)%% (Note that a20C,UGoff are in terms of mV, so make input mV also)ch2s = H2SCoef.a20C .* (H2SV*1000 - H2SCoef.UGoff) .* ET .* KT;% Total sulphide concentration (approx form, very good: diff/exact<<1ppt)cSG = ch2s .* (1 + 10.^(pH + K1e));% Return H2S concentration if requestedif nargout>1    cH2S = ch2s;end