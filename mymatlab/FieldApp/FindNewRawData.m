function filelist = FindNewRawData(localpath,fileprefix,filesuffix,file_index)% filelist = FindNewRawData(localpath,fileprefix,filesuffix,file_index);% Determine raw data files in folder=localpath (whose names start with %   fileprefix) that have been created or modified so that their new data%   can be converted and saved to matlab data files.%   file_index is the raw datafile index that keeps track of which%   data have already been converted.% Returns names of potential files in string cell = filelist,%   but actually indicates which files should be converted,%   and over what byte range, by modifying and saving the file_index.%   To sort data by time, it is assumed files have UTC timestamp following%   fileprefix of format yyyymmddTHHMMSS (e.g. 20150602T203315) indicating%   when file was initially created.  Naming convention after timestamp%   may vary with type of data, as shown in filesuffix.% Alters raw index to indicate byte range for 'new' data in each file% Raw Index contains:%   file_name (string cell), file_yday (from timestamp in name), %   file_size (as of completion of its last conversion),%   file_status (0=ready to convert, 1=conversion complete),%   file_lastbyte (last byte number converted thus far),%   file_convcnt (count of times this file had some of its data converted),%   file_pendbytes ([start; end] byte positions in raw file that will%          be checked for conversion on next pass; set to [NaN;NaN]%          after conversion is successful)% modified apr-02 by dpw from GetNewFiles.m, mha mar-01 [SaveNewFiles.m];% Aug 2015, Dave W for Scripps raw files, which are updated periodically%   by rsync'ing from the SWIMS acquisition machineif nargin < 4    file_index = [];endfilelist=[];file_name=[]; file_size=[]; file_yday=[]; file_status=[];file_convcnt=[]; file_lastbyte=[]; file_pendbytes=[];if ~isempty(file_index)    if ~exist(file_index,'file')        disp(['Exiting FindNewRawData, no index=' file_index])        filelist=NaN;        return    else        load(file_index)    endelse    disp('Must specify raw index file to FindNewRawData');    filelist = NaN;    returnendlocfils = dir(fullfile(localpath,[fileprefix '*' filesuffix]));% Determine which files have new data to convertfor irf = 1:length(locfils)    fnm = locfils(irf).name;    % skip directories and very small files    if locfils(irf).isdir || locfils(irf).bytes < 10        continue;    end        % find location in index    idx = find( strcmpi(fnm, file_name) );        if isempty(idx) % haven't seen this file yet, add to index if valid        try            TSstr = fnm(length(fileprefix)+(1:15));            Fyday = datenum(TSstr,'yyyymmddTHHMMSS') - ...                datenum(str2num(TSstr(1:4)),1,1,0,0,0);        catch            Fyday = NaN;        end        if isnan(Fyday)            continue; % skip, doesn't have expected timestamp in filename        end        idx = length(file_name)+1; % append to index variables        file_name{idx} = fnm;        file_yday(idx) = Fyday; % file's raw data starts at this yearday        file_size(idx) = 0; % don't update size until converted        file_status(idx) = 0; % attempt conversion        file_convcnt(idx) = 0; % initialize counter        file_lastbyte(idx) = 0;        file_pendbytes(1:2,idx) = [0; inf]; % convert entire file            else % check to see if file has grown, or if uncoverted data remain        idx = idx(1); % just in case        if locfils(irf).bytes - file_size(idx) > 1 || ...                locfils(irf).bytes - file_lastbyte(idx) > 10            % attempt to convert raw data past file's previous LastByte            file_status(idx) = 0;            file_pendbytes(1:2,idx) = [file_lastbyte(idx); inf];        end    end % of adding to, or adjusting, raw data indexend % of looping through potential raw filesiok = find(~file_status);if isempty(iok)    disp(['No new ' fileprefix 'files, exiting.'])    returnendfilelist = file_name(iok);disp(['Finished checking raw files, updating ' file_index])save(file_index, 'file_name','file_size','file_yday','file_status', ...    'file_convcnt','file_lastbyte','file_pendbytes');return