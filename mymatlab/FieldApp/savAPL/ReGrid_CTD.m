% ReGrid_CTD.m  -  Re-Grid SWIMs CTD profiles, using existing gridfile index%   to establish yearday ranges for each file's profiles (no update to index)%   (save existing grid files in another folder, they will be overwritten)%      Dave W, June 2002, to put yd_byz (yday vs depth) in HC,LS filesclearset_swims_pathsSWIMSfoldersPCYDrgB = 115.4; YDrgE = 119.53; % Range of profile yeardays to re-gridIndFld = fullfile(savepath, 'indexes'); % raw,matlab data index folderCrName = 'ps02';MatFld = fullfile(savepath,'data_mat','CTD'); % local mat directoryMatIndx = fullfile(IndFld, ['CTD_' CrName '_matfiles.mat']);GridIndx = fullfile(IndFld, ['SWIMS_' CrName '_gridfiles.mat']);GridFld = fullfile(savepath,'griddata'); % local mat directoryGpsIndx = fullfile(IndFld, ['GPS_' CrName '_matfiles.mat']);GpsFld = fullfile(savepath,'data_mat', 'GPS');if ~exist(GridIndx,'file') | ~exist(MatIndx,'file')    disp('  Cannot find index into raw CTD or gridded files, skipping!')    returnendclear GrdF Cruise Set_params Index PROG % matlab (grid) index GrdF=load(GridIndx);LastDataFLG = 0;GridStartTime = YDrgB;%% Find subset that these data belong to (yearday range)iSet = 0;for i=1:length(GrdF.Set_params)    if GrdF.Set_params(i).start_yday<GridStartTime ...            & GrdF.Set_params(i).end_yday>GridStartTime        iSet = i;        break    endendif ~iSet    disp(['Start yday=' num2str(GridStartTime) ...            ' is outside the bounds of Grid Index - exiting!'])    returnendiRGs = find(GrdF.Index(iSet).yday_beg >= GridStartTime & ...    GrdF.Index(iSet).yday_end <= YDrgE);disp(' ')disp(['Ready to update ' num2str(length(iRGs)) ' files in ' GridFld ' :'])for i=1:length(iRGs)    disp( GrdF.Index(iSet).filename{iRGs(i)} )endx=input('Ready? ');if x~=1    disp('Stopping, need to enter 1 to run this!')    returnendfor inRG = 1:length(iRGs)        GrNum = iRGs(inRG);    % Get parameters for this grid file    YDBEG = GrdF.Index(iSet).yday_beg(GrNum);    % use start of next file to restrict end of current gridded profiles    YDEND = min( GrdF.Index(iSet).yday_end(GrNum)+15/1440, ...        GrdF.Index(iSet).yday_beg(GrNum+1) );     GFil = GrdF.Index(iSet).filename{GrNum};    ZG = GrdF.Index(iSet).zgrid(GrNum,1:3);    zgrid = ZG(1):ZG(2):ZG(3);        disp([' ReGrid file=' GFil ' ...'])        % get extra data at ends (-10,+20 minutes)     yd_b = YDBEG - 10/1440;     yd_e = YDEND + 20/1440;         GPS = get_gps_data(yd_b, yd_e, GpsIndx, GpsFld);    CSci = get_SWIMS_SciData(yd_b, yd_e, MatIndx, MatFld);    iBeg = 1; iEnd = length(CSci.yday_adj);    %% Find profiles in data, save those in index entry's yearday range    IND = iBeg:iEnd;    [inds,indf,ud,bf] = get_profiles(CSci.Pr(IND)', CSci.yday_adj(IND)', 24);        ipx = find(CSci.yday_adj(IND(inds)) < YDBEG-15/86400 | ...        CSci.yday_adj(IND(inds)) >= YDEND-10/86400);    inds(ipx)=[]; indf(ipx)=[]; ud(ipx)=[]; % previous or later ones    if isempty(inds)        disp('  No profiles found!')        continue    end    %keyboard    clear NGr, NGr = [];    % Fill in the time vector.    NGr.yday = CSci.yday_adj(IND(inds));    NGr.starts = IND(inds);    NGr.ends = IND(indf);    NGr.updown = ud;    NGr.z = zgrid;    % And GPS vectors, if they are being recorded.    indgood=find(~isnan(GPS.sattime));    if ~isempty(indgood)        NGr.lat = nonmoninterp1(GPS.sattime(indgood), GPS.lat(indgood), NGr.yday);        NGr.lon = nonmoninterp1(GPS.sattime(indgood), GPS.lon(indgood), NGr.yday);    else        NGr.lat = NaN*NGR.timegrid;        NGr.lon = NaN*NGR.timegrid;    end    %Now grid each profile of each variable onto the 1/2-m z grid.    for ci=1:length(inds)        NGr.t1(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.T1(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.t2(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.T2(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.th1(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.Th1(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.th2(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.Th2(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.c1(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.C1(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.c2(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.C2(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.s1(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.S1(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.s2(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.S2(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.sgth1(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.Sg1(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.sgth2(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.Sg2(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.pitch(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.Pitch(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.roll(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.Roll(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.dox(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.Dox(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.flu(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.Flu(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.obs(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.Obs(IND(inds(ci)):IND(indf(ci))), zgrid)';        NGr.yd_byz(:,ci) = nonmoninterp1(CSci.Pr(IND(inds(ci)):IND(indf(ci)))*100,...            CSci.yday_adj(IND(inds(ci)):IND(indf(ci))), zgrid)';    end % of depth gridded data        flds = {'t1','t2','c1','c2','s1','s2','th1','th2','sgth1','sgth2', ...            'pitch','roll','yd_byz', 'obs','dox','flu', ...            'yday','lat','lon','starts','ends','updown'};    SWIMSgrid = NGr;    disp(['    Saving ' num2str(length(SWIMSgrid.yday)) ' profiles.'])    save( fullfile(GridFld,GFil), 'SWIMSgrid' );    end % of single regridded file