function [ah,ah2] = BitchinPlot2(x,y,data,minmaxd,colorpal,bartitle,px,py,pthis,smooth,mincolor,maxcolor,ncolors)%function [ah,ah2] = BitchinPlot2(x,y,data,minmaxd,colorpal,%	bartitle,px,py,pthis,smooth,mincolor,maxcolor,ncolors)%New and improved BitchinPlot.%MHA 8/14/00%It makes many-paned plots.  Call it once for each pane.%The result is a pane of the data to the left, and a colorbar to the right.%ah and ah2 are the handles to the plot and colorbar axes of the pane just plotted.%x,y, data are vectors and matrices for the data to be plotted%minmaxdata is a 2 x 1 vector with the plotting limits.%colorpal is the palette to be used for this pane.%bartitle is the text to be written vertically next to the colorbar.%px and py are the number of total panes across and down.%pthis is the present pane to be done (Row-major).%smooth = 0 causes 'image' to be used, which produces a pixel for each data%point.  If smooth =1, contourf is used, which interpolates for smoother results.%mincolor and maxcolor are both 0-1, and specify the range of the palette%to be used in the current pane.%ncolors is the number of colors in the whole palette to use.  default is 240.%If smooth=1 and ncolors is big, it can take a while.if(nargin >= 4), maxd = max(minmaxd); mind = min(minmaxd);elseif(nargin == 2),  data=y; [m,n]=size(data); nx=length(x);  if(m == nx) y=x; else y= (1:m+1)-.5; end  if(n ~= nx) x= (1:n+1)-.5; endelseif(nargin == 1),  data = x;  [m,n]=size(data);  x= (1:n+1)-.5;  y= (1:m+1)-.5;endif(nargin <= 3), maxd = max(max(data)); mind= min(min(data)); end;if(nargin <= 4), colorpal = 'jet'; end;if nargin <= 6	px=1;py=1;pthis=1;endif ~exist('ncolors')ncolors = 240;endif ~exist('colorpal')	colorpal='jet';endif ~exist('bartitle')	bartitle='';endif px == 1 & py == 1 | pthis == 1	clf resetend		 if nargin< 11	smooth=0;endif mincolor < 0 	mincolor=0;endif maxcolor > 1 	maxcolor=1;end%Done processing arguments.%Determine axis locations.if (px == 1 & py == 1)	cbt=.1;	cbl=.9;	cbw=.05;	cbh=.8;	it=.1;	il=.1;	iw=.7;	ih=.8;else	%margins of whole figure	mx=.1;	my=.05;	%margins of subpanes	imx=.1;	imy=.12;	%space between image and colorbar	if px >= 2		dx=.18;%	elseif px ==2%		dx=.12;	else		dx=.08;	end	%We'll go across like matlab's subplot	pthisx=rem(pthis,px);	if pthisx==0		pthisx=px;	end	pthisy=(py+1)-ceil(pthis/px);	%Horizontal position		%subpane left		spl=mx+(pthisx-1)/px*(1-2*mx);		%subpane width		spw=(1-2*mx)/px;		%colorbar width		cbw=.03*spw;		%colorbar left -- room for bar and right margin		cbl=spw*(1-cbw-imx)+spl;		%image left		il=spl+imx*spw;		%image width -- room for bar and left, between and right margins		iw=spw*(1-cbw-2*imx-dx);	%vertical position		%subpane top		spt=my+(pthisy-1)/py*(1-2*my);		%subpane height		sph=(1-2*my)/py;		%image height		ih=sph*(1-2*imy);		%colorbar height = image height		cbh=ih;		%image top		it=spt+imy*sph;		%color bar top = image top		cbt=it;end%keyboard%If one or the other is one, then revert those values to normal%except narrower colorbarif px == 1 	cbl=.92;	cbw=.03;	il=.12;	iw=.70;endif py == 1	cbt=.1;	cbh=.8;	it=.1;	ih=.8;end%If more than one plot in y direction, set aspect ratio for paperif py > 1	set(gcf,'Position',[ 257 19 500 11/8.5*500]);	orient tallend%Color Barah2=axes('position',[cbl cbt cbw cbh]);%percentage of the total color map usedcolperc=(maxcolor-mincolor);ncols=fix(colperc.*ncolors);mincol=floor(mincolor.*ncolors);colorvec=mincol+(1:ncols);colorvecsm=mind+(maxd-mind).*(1:ncols)./ncols;fakemin=mind-mincolor/colperc*(maxd-mind);fakemax=maxd+(1-maxcolor)/colperc*(maxd-mind);ncontours=fix(ncolors*(maxcolor-mincolor));if smooth==0	image( [0 1], mind +(0:(ncols-1))*((maxd-mind)/(ncols-1)), colorvec' );else	contourf( [0 1], mind +(0:(ncols-1))*((maxd-mind)/(ncols-1)), [colorvecsm' colorvecsm'],...		[fakemin:((fakemax-fakemin)/ncontours):fakemax]);	shading flat	caxis([fakemin fakemax])	set(gca,'layer','top')	set(gca,'box','on')endset(ah2,'ydir','normal','xticklabel',' ','xtick',[]);%if px==1 & py ==1	set(gca,'FontWeight','Bold')	%set(gca,'FontSize',14);%endif length(bartitle) > 0	ylabel(bartitle)end%if we're sharing colormaps we need to truncate data which is out of range%or else it'll plot with the other parts' colors.data(find(data<mind))=mind;data(find(data>maxd))=maxd;%Imageah=axes('Position',[il it iw ih]);if smooth == 0	%image( x, y, ((ncolors-1)/(fakemax-fakemin))*(data-fakemin)+1 );	%image does not do interpolation right when the x and y vectors are 	%not evenly spaced.  Use pcolor.  3/28/01	%pcolor( x, y, ((ncolors-1)/(fakemax-fakemin))*(data-fakemin)+1 );    %4/02 change: this was not scaling the data properly.  Fix by using pcolor    %to plot 'data' and set the caxis.	pcolor( x, y, data );	axis ij	shading flat	caxis([fakemin fakemax])    else	%size(x);	%size(y);	%size(data)	%size([fakemin:((fakemax-fakemin)/ncontours):fakemax])	contourf( x, y, data,[fakemin:((fakemax-fakemin)/ncontours):fakemax]);	axis ij	shading flat	caxis([fakemin fakemax])	set(gca,'layer','top')	set(gca,'box','on')	endcmap=colormap;if length(cmap) ~= ncolors	cmap=zeros(ncolors,3);end%Stick this section's colormap into the big onei1=mincolor*ncolors+1;i2=maxcolor*ncolors;ncol_this=i2-i1+1;eval(['smmap=' colorpal '(' num2str(ncol_this) ');']);cmap(i1:i2,:)=smmap;colormap(cmap);if(exist('pg') == 2)	pg; end%All Done!