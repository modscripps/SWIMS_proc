function [h,h_cb]=ShadedImager(x,y,data,minmaxd,maxsh,shades,shadefac,bartitle,rowcol);%function [h,h_cb]=%ShadedImager(x,y,data,minmaxd,maxsh,shades,shadefac,bartitle);%Produce a Pinkel/Sherman-style image which uses a shaded palette%to simultaneously map the value and the first difference of the%data.  It uses a shaded palette to do this: colors map the data, and %the shading within each color band maps the difference.%%Inputs:%x,y are vectors to plot against.%%data is the data to be plotted.%%minmaxd is a 1 x 2 vector with the minimum and maximum values to correspond%to the color bar limits.%%maxsh is the difference corresponding to maximum shading.%%shades is the number of shades to be used.  This routine automatically%uses a 256-color map, so the palette will be divided into (256/shades) color%bands, each of which will have (shades) shades.  16 colors, 16 shades is a %decent tradeoff for starting out.  Experiment as desired.%%shadefac is a number from 0 to 1 setting the darkness of the shaded %palette.  1 is darkest.  0.6 is good for many purposes.%%Bartitle is the text to be placed to the left of the colorbar.%%rowcol = 0 for differencing down columns (default), 1 for across rows.%%Outputs: handles to the axes of the main plot and of the color bar.%%Dependencies: the m-file ShadedPalette.m is also required.%Get the shading factor if not specifiedif ~exist('maxsh')	maxsh=4*max(max(diff(data)));end%minsh = 0;%Get the data limits if not specifiedif ~exist('minmaxd')	mind=min(min(data));	maxd=max(max(data));else	maxd = max(minmaxd);	mind = min(minmaxd);end%Make up a title if none specifiedif ~exist('bartitle')	bartitle='';end%Compute the number of colors.colors=256/shades;%Set rowcol if not specified.if ~exist('rowcol')	rowcol=0;end%Form the difference of the data.  Go down columns if rowcol=0,%and across rows if it is one.  Columns is the default.if rowcol==0diffdata=-diffs(data);else	diffdata=-diffs(data')';end%Compute the shading.  Restrict it to be from 0 to (shades-1).shademult=((shades-1)/2/(maxsh-minsh))*(diffdata-minsh)+(shades-1)/2;ind1=find(shademult>shades-1);shademult(ind1)=shades-1;ind1=find(shademult<0);shademult(ind1)=0;%The color is set by the value of the data relative to the specified limits.olddata=shades*floor((colors-1)/(maxd-mind)*(data-mind)+1); %The position within that color band is set by the shading:newdata=olddata+shademult;%The final value is between 1 and 256.ind1=find(newdata>256);newdata(ind1)=256;ind1=find(newdata<1);newdata(ind1)=1;%Make the image.%h=axes;clfimg=image(x,y,newdata);h=gca;%Get the palette and set it.a=ShadedPalette(256,shadefac,shades);colormap(a);%Color Bar -- first shrink the main axispos=get(h,'position');cbw=.03;newpos=pos(3)+pos(1) -cbw;pos(3)=pos(3)-.12;set(h,'position',pos);%Now make the colorbar axispos(3)=cbw;pos(1)=newpos;h_cb=axes('position',pos);ncols=256;colorvec=(1:ncols);image( [0 1], mind +(0:(ncols-1))*((maxd-mind)/(ncols-1)), colorvec' );set(h_cb,'ydir','normal','xticklabel',' ','xtick',[]);ylabel(bartitle)%Set gca back to the main plot.axes(h)