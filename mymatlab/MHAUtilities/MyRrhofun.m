function [Rrho,angle,pr_angle]=Rrhofun(s,th,p);%Rrhofun: [Rrho,angle,pr_angle]=Rrhofun(s,th,p) - density ratio as angle%modified from Mike's to use my definition Tu(me) = Tu(mike) - 45 degs.%and also to return Rrho as well as Tu.  Note Rrho is alphaTz/betaSz, not%the other way around.  This is tested and works now.%It takes s in psu, and p in MPa.	len=length(p);	pr_angle=(p(1:len-1)+p(2:len))/2;  s_avg=(s(1:len-1)+s(2:len))/2;	th_avg=(th(1:len-1)+th(2:len))/2;	alpha=sw_alpha(s_avg,th_avg,100*pr_angle);	beta=sw_beta(s_avg,th_avg,100*pr_angle);	%alpha=1.4e-4*ones(size(s_avg));	%beta=7e-4*ones(size(s_avg));	%disp(['alpha=' num2str(nanmean(alpha))])	%disp(['beta=' num2str(nanmean(beta))])%z is positive upwards.  So when s is increasing with depth dsdz < 0.%t decreasing with depth --> dtdz > 0.  So     dsdz = -diff(s)./diff(p);    dthdz = -diff(th)./diff(p);%    bs = -beta.*dsdz;%    at = alpha.*dthdz;%	angle=atan((at - bs)./(at+bs));%12/30/99 changes below.  Turner angle was mapped improperly%when it was less than -pi/2.    bs = beta.*dsdz;    at = alpha.*dthdz;	Rrho=at./bs;	angle=atan(-Rrho)-pi/4;		ipi=find(angle<-pi/2);	angle(ipi)=angle(ipi)+pi;	%angle=atan2(at+bs,at-bs);