function [time,ser]=SyntheticTimeSeries(P,f)%Make a fake time series by randomizing the phase of fft%The spectrum should have units of m^2/freq, to produce a %series with m units in the time domain.%components with amplitudes specified by the input spectrum.%It will be sampled at twice the nyquist freq.  n=2*length(P);samplefreq=2*max(f);if size(find(isnan(P))) > 0	disp 'warning: replacing NaNs with zeros'	P(find(isnan(P)))=0;end%Now compute the fft magnitude, dividing by two first since we're going%to use the whole bandwidth, and multiplying it by n to make it a matlab-type%fft.amag=sqrt(P/2);%Now put amag into the fft vector at the right places.%The spectrum as specified has no mean bin, but does have the nyquist.a=zeros(1,n);%Make a vector which has random phase for all but the nyquist.ph=[rand(1,n/2-1)*2*pi 0];%randomize the phases of amag.amag=amag.*exp(i*ph);a(2:n/2)=amag(1:n/2-1);a(n/2+1:n)=fliplr(conj(amag(1:n/2)));ser=ifft(a)*sqrt(n*samplefreq);if max(imag(ser)) < 1e-8 * max(real(ser)) 	ser=real(ser);else	disp 'warning: ser has large imag parts'	max(imag(ser)) ./ max(real(ser)) end%P(1)*max(f)/mean(ser.^2)time=(0:n-1)/samplefreq;