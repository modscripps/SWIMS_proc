function [SWIMSctd]=Read_raw_SWIMS(filename, Version)% [SWIMSctd]=Read_raw2_SWIMS(filename, Version);% Convert raw CTD data (freq, Volts, cts) to Matlab data. % filename = file written by acquisition program;% Version = identifies format, 1=SWIMS 1 (pre-2002), 2=SWIMS 2 (default).% Following data are returned in fields of structure SWIMSctd:%   tfreq, cfreq, pfreq, tfreq2, cfreq2 = primary temp, cond, pressure,%       secondary temp, cond  (all in Hz);%   addata = Voltages (0-5 V) from 8 A-to-D channels (8xNrecs);%   tprCT = compensation temp (12-bit count) for pressure;%   status = 4-bit status info (pump on, etc.);%   modCT = modulo count (0-255, 8-bit integer>0);%   SWIMStime = timestamp (PC clock), seconds since Jan 1, 1900 00:00:00,%       returned as Matlab datenum = days with 1 = Jan 1, 0000 00:00:00.%   SWIMSfasttime = elapsed seconds since acquistion session began.% Modified March,2002 by D.Winkel from M.Alford's GetSWIMSRawData(filename)% Deck box transmits hex characters, (24 or 30)/scan, then CR,LF;% Acquisition program timestamps and outputs as binary data to files:%   first 4 bytes are integer clock value - in seconds;%   next 8 bytes are double elapsed time value (seconds); %   next 24 (SWIMS 1) or 30 (SWIMS 2) bytes are a CTD data scan.%if nargin<2 | isempty(Version)    Version = 2; % for SWIMS 2end% specify sizes/positions of 8-bit and 12-bit fields in recordsif Version == 2    TSbyt = [4, 8]; CTbyt = 30; % 8-bit bytes    ADfmt = 28; ADbyt = [19:26]; ETCbyt = [27 28]; % 12-bit wordselseif Version == 1    TSbyt = [4, 8]; CTbyt = 24;     ADfmt = 24; ADbyt = [19:22]; ETCbyt = [23 24];end TSoff = sum(TSbyt); % total time-stamp bytesdate_1900 = datenum(1900,1,1);   %Open the file as little-endian since it was written on a PC.[fid,message]=fopen(filename,'r','ieee-le');% read the clock values, skip elapsed&scan bytes after each[d, count] = fread(fid, inf, 'uint32', TSbyt(2)+CTbyt)';SWIMSctd.SWIMStime = date_1900 + d' / 86400; % MatLab datenum% read elapsed time values, skip scan&clock bytes after eachstatus = fseek(fid, TSbyt(1), 'bof');SWIMSctd.SWIMSfasttime = fread(fid, inf, 'double', CTbyt+TSbyt(1))';%These both produce the time in seconds.%plot(SWIMStime-SWIMStime(1),SWIMSfasttime-SWIMSfasttime(1),SWIMStime-SWIMStime(1),SWIMStime-SWIMStime(1),'k--')frewind(fid);  % 8-bit bytes[d, count] = fread(fid, [TSoff+CTbyt, inf], 'uchar');%Get temp - first three bytes after the time stampsSWIMSctd.tfreq=d(TSoff+1,:)*256+d(TSoff+2,:)+d(TSoff+3,:)/256;%Get cond - next threeSWIMSctd.cfreq=d(TSoff+4,:)*256+d(TSoff+5,:)+d(TSoff+6,:)/256;%Get pres - next threeSWIMSctd.pfreq=d(TSoff+7,:)*256+d(TSoff+8,:)+d(TSoff+9,:)/256;%Get temp2 - first three bytes after the time stampsSWIMSctd.tfreq2=d(TSoff+10,:)*256+d(TSoff+11,:)+d(TSoff+12,:)/256;%Get cond2 - next threeSWIMSctd.cfreq2=d(TSoff+13,:)*256+d(TSoff+14,:)+d(TSoff+15,:)/256;% A/D Data.%Now rewind and load in data as 12-bit words.%Total record yields 24 such words for SWIMS 1, 28 words for SWIMS 2.%The first 8 are the time stamps, the next 10 are the 15 bytes of CTD scan%frequencies, and the next 4 (S1) or 8 (S2) are A/D channels.%The last two words have pres.comp.temp, status, and modulo count.% (Note it is important to close and reopen the file as bigendian so the %  bit orders are correct.)fclose(fid);[fid,message]=fopen(filename,'r','ieee-be');frewind(fid);[d2, count] = fread(fid, [ADfmt, inf], 'ubit12');%close the filestatus = fclose(fid);% Convert counts to Volts, and gather misc data from last 2 wordsaddata = d2(ADbyt,:);if Version == 2    SWIMSctd.addata = 5*(1 - addata/4095); % 5 to 0 Volts    SWIMSctd.tprCT = d2(ETCbyt(1),:); % 12-bit uint    SWIMSctd.status = floor(d2(ETCbyt(2),:)/256); % first 4 bits    SWIMSctd.modCT = mod(d2(ETCbyt(2),:),256); % last 8 bitselseif Version == 1    SWIMSctd.addata = 10*(1 - 2*addata/4096); % 10 to -10 Volts    SWIMSctd.tprCT = floor(d2(ETCbyt(1),:)/16); % 8-bit unit (first 8 of 12)    SWIMSctd.status = floor(d2(ETCbyt(2),:)/256); % only LSB is used (pump off/on)    SWIMSctd.modCT = mod(d2(ETCbyt(2),:),256); % last 8 bitsend%